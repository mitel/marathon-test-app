# box: alpine linux with node, npm, python
# alpine does not have bash installed, hence the cmd setting
box: 
  id: mitelone/alpine-node-dev:latest
  cmd: /bin/sh

# ########
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  box: 
    id: mitelone/alpine-node-dev:latest
    cmd: /bin/sh
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
    
    # A step that executes `npm install` command
    - npm-install:
        use-cache: true
        clear-cache-on-failed: true
    # A step that executes `npm test` command
    # - npm-test

    # A step that executes webpack to build the node.js artifact
    - mitelone/webpack@0.0.2:
        config-file: webpack.config-server.js
        verbose: true
        colors: true
        display-error-details: true

    # Copy binary to a location that gets passed along to the deploy pipeline
    - script:
        name: copy webpack build and static files to $WERCKER_OUTPUT_DIR...
        code: | 
          cp -r dist/server $WERCKER_OUTPUT_DIR;
          cp -r src/static $WERCKER_OUTPUT_DIR;
          cp runtime/marathon/template.sh $WERCKER_OUTPUT_DIR;

# deploy:
#   box: 
#     id: mhart/alpine-node:base-5.10.1
#     cmd: /bin/sh
#   steps:
#     # creates and pushes the docker image to docker hub
#     # /pipeline/source is the path where $WERCKER_OUTPUT_DIR pointed in the build part
#     - internal/docker-push:
#         username: $USERNAME
#         password: $PASSWORD
#         repository: mitelone/marathon-test-app
#         tag: $WERCKER_GIT_COMMIT
#         working-dir: /pipeline/source
#         entrypoint: node server/server.js
#         ports: "8080"

deploy:
  # uses a different docker image without npm installed
  dockerhub:
  # box: 
  #   id: mhart/alpine-node:base-5.10.1
  #   cmd: /bin/sh
    steps:
    # creates and pushes the docker image to docker hub
    # /pipeline/source is the path where $WERCKER_OUTPUT_DIR pointed in the build part
      - internal/docker-push:
          username: $USERNAME
          password: $PASSWORD
          repository: mitelone/marathon-test-app
          tag: $WERCKER_GIT_COMMIT
          working-dir: /pipeline/source
          entrypoint: node server/server.js
          ports: "8080"
  marathon:
  # box: 
  #   id: mitelone/alpine-node-dev:latest
  #   cmd: /bin/sh
  # steps:
    - script:
        name: generate json
        code: chmod +x template.sh && ./template.sh
    - mitelone/marathon-deploy@0.1.9:
        auth-token: $AUTH_TOKEN
        marathon-url: $MARATHON_ENDPOINT
        app-name: $APP_NAME
        app-json-file: /pipeline/source/test1.json
        instances: "$INSTANCES"

dev:
  box: 
    id: mitelone/alpine-node-dev:latest
    cmd: /bin/sh
  steps:
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
    - npm-install:
        use-cache: true
        clear-cache-on-failed: true
    - mitelone/webpack@0.0.2:
        config-file: webpack.config-server.js
        verbose: true
        colors: true
        display-error-details: true
    # Copy binary to a location that gets passed along to the deploy pipeline
    - script:
        name: copy webpack build and static files to $WERCKER_OUTPUT_DIR...
        code: | 
          cp -r dist/server "$WERCKER_OUTPUT_DIR";
          cp -r src/static "$WERCKER_OUTPUT_DIR";
          cp runtime/marathon/template.sh $WERCKER_OUTPUT_DIR;
    - internal/shell:
      cmd: /bin/sh  #defaults to /bin/bash
      code: |
        # some code to automatically run in your shell session
        # before you start interacting
        cd $WERCKER_OUTPUT_DIR
        cat template.sh


